<?php
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © 2008 Hewlett-Packard Development Company, L.P. 
//
//  This work is distributed under the W3CÂ Software License 
//  [1] in the hope that it will be useful, but WITHOUT ANY 
//  WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
//
//  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//  class.db_result_set.phi
//
//  Provides base functionality for interfacing with the results of database
//  queries. The Mobile Test Harness [1] provided ad hoc interfacing for
//  selected queries. Here, we providing instead a base class for standard
//  generic interactions, which is subsequently subclassed to accomodate 
//  specific needs.
//
// [1] http://dev.w3.org/cvsweb/2007/mobile-test-harness/
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//  class db_result_set
//
//  In php, MySQL query results are returned as resource handles. This object 
//  stores a handle and provides an interface to access the contained data.
//
//  db_result_set works with db_connection (defined separately) as part of a 
//  Factory Design Pattern, where db_connection is a specialized object solely 
//  used to create other instances of db_result_set. 
//
//  Other objects needing to get, post, update, or delete information from the 
//  database will function as a client to an instance of db_connection which, 
//  in turn, will produce a db_result_set.
//
//  In this way, the client object that requires an instance of db_result_set
//  for some purpose does not need to creat this product instance directly, 
//  rather the client object delegates this responsibility to the factory. 
//
//  Once invoked, the factory creates a new instance of the product, passing it 
//  back to the client. Put simply, the client uses the factory to create an 
//  instance of the product.
//
////////////////////////////////////////////////////////////////////////////////
class db_result_set
{
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Instance variable to hold a handle MySQL result set.
  //
  ////////////////////////////////////////////////////////////////////////////
  
  var $m_result_set;
  
  ////////////////////////////////////////////////////////////////////////////
  //
  //  is_false()
  //
  //  returns TRUE is the stored resource value is FALSE;
  //
  ////////////////////////////////////////////////////////////////////////////
  function is_false()
  {
    if($this->m_result_set) return FALSE;
    return TRUE;
  }
  
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor
  //
  //  Store a MySQL result set for future access.
  //
  //  The MySQL result comes from a call to mysql_query().
  //
  ////////////////////////////////////////////////////////////////////////////
  function db_result_set($a_result_set) 
  {
    $this->m_result_set = $a_result_set;
  }
  
  ////////////////////////////////////////////////////////////////////////////
  //
  //  num_rows()
  //
  //  return row count from the MySQL result set or FALSE on failure.
  //
  ////////////////////////////////////////////////////////////////////////////
  function num_rows()
  {
    return mysql_num_rows($this->m_result_set);
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  result()
  //
  //  Retrieves the contents of one cell from a MySQL result set or FALSE on
  //  failure.
  //
  ////////////////////////////////////////////////////////////////////////////
  function result($a_index, $a_name)
  {
    return mysql_result($this->m_result_set, $a_index, $a_name);
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  // fetch_array()
  //
  //  Returns an array that corresponds to the fetched row and moves the 
  //  internal data pointer ahead or FALSE if there are no more rows.
  //
  //  If two or more columns of the result have the same field names, the last
  //  column will take precedence. To access the other column(s) of the same
  //  name, you must use the numeric index of the column or make an alias for 
  //  the column. For aliased columns, you cannot access the contents with the
  //  original column name.
  //
  ////////////////////////////////////////////////////////////////////////////
  function fetch_array()
  {
    return mysql_fetch_assoc($this->m_result_set);
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  fetch_row()
  //
  //  Returns a numerical array that corresponds to the fetched row and moves 
  //  the internal data pointer ahead or FALSE if there are no more rows.
  //
  //  The row is returned as an array. Each result column is stored in an 
  //  array offset, starting at offset 0.
  //
  ////////////////////////////////////////////////////////////////////////////
  function fetch_row()
  {
    return mysql_fetch_row($this->m_result_set);
  }
  
  ////////////////////////////////////////////////////////////////////////////
  //
  //  fetch_table()
  //
  //  Returns an array that stores the entire data set contained in the 
  //  result resource.
  //
  //  The returned array contains the data as 
  //
  //    $table[row_id]['field_name'];
  //
  ////////////////////////////////////////////////////////////////////////////
  function fetch_table()
  {
    $table = array();
    
    //count the rows and fields
    $total_rows = mysql_num_rows($this->m_result_set);
    $total_fields = mysql_num_fields($this->m_result_set);
    
    for ( $i = 0; $i < $total_rows; ++$i ) {
      $table[$i] = mysql_fetch_assoc($this->m_result_set);
    }  
    
    return $table;
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  fetch_column()
  //
  //  Returns an array that stores the data contained for a single column of 
  //  the MySQL result array.
  //
  ////////////////////////////////////////////////////////////////////////////
  function fetch_column($a_column_number)
  {
    $column_data = array();

    //count the rows and fields
    $total_rows = mysql_num_rows($this->m_result_set);

    for ( $i = 0; $i < $total_rows; ++$i ) {
      $row = mysql_fetch_row($this->m_result_set);
      $column_data[$i] = $row[$a_column_number]; 
    }  
    
    return $column_data;
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  fetch_field_data()
  //
  //  Returns an array that stores the data contained for a single field of 
  //  the MySQL result array.
  //
  ////////////////////////////////////////////////////////////////////////////
  function fetch_field_data($a_field_name)
  {
    $field_data = array();

    //count the rows and fields
    $total_rows = mysql_num_rows($this->m_result_set);

    for ( $i = 0; $i < $total_rows; ++$i ) {
      $record = mysql_fetch_assoc($this->m_result_set); 
      $field_data[$i] = $record[$a_field_name]; 
    }  
    
    return $field_data;
  }
}
?>