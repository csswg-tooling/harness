<?php
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © 2008 Hewlett-Packard Development Company, L.P. 
// 
//  This work is distributed under the W3C¬ Software License 
//  [1] in the hope that it will be useful, but WITHOUT ANY 
//  WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// 
//  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231 
//
//////////////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////////////// 
//
//  class.test_groups.phi
//
//  In the Mobile Test Harness [1] listings of there was no concept of named
//  sub-groups within individual test suites. For the CSS2.1 test harness 
//  working with such named test groups is a desired feature. 
//
//  Provided herein is functionalities for obtaining a listing of available
//  named test groups within a particular test suite.
//
// [1] http://dev.w3.org/cvsweb/2007/mobile-test-harness/
//
//////////////////////////////////////////////////////////////////////////////// 

require_once("./lib_test_harness/class.DBConnection.phi");

////////////////////////////////////////////////////////////////////////////////
//
//  class test_groups
//
//  test_groups is a concrete DBConnection taylored for storing the 
//  table of contents of available named test groups for a particular
//  test suite.
//
////////////////////////////////////////////////////////////////////////////////
class test_groups extends DBConnection
{
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Instance variables.
  //
  ////////////////////////////////////////////////////////////////////////////
  var $m_toc;
  var $m_count;

  ////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor
  //
  //  Query the database for a list of available test groups within a
  //  particular test suite. The results are to include information about 
  //  each group as required for generating a desired human readable 
  //  listings.
  //
  ////////////////////////////////////////////////////////////////////////////
  function __construct($test_suite) 
  {
    parent::__construct();
    
    $this->m_count = 0;
    
    $sql  = "SELECT DISTINCT testcases.testgroup, testgroups.title ";
    $sql .= "FROM testcases LEFT JOIN testgroups ";
    $sql .= "ON testcases.testgroup = testgroups.testgroup ";
    $sql .= "WHERE testcases.testsuite='{$test_suite}'";
    
    $r = $this->query($sql);
    
    if ($r->is_false()) {
      $msg = 'Unable to obtain list of test groups.';
      trigger_error($msg, E_USER_ERROR);
    }
    
    $toc = $r->fetch_table();
    if ($toc) {
      foreach ($toc as $testGroup) {
        if ($testGroup['testgroup'] != '') {
          $this->m_toc[] = $testGroup;
        }
      }
    }

    if ($this->m_toc) {
      $this->m_count = count($this->m_toc);
    }
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_count
  //
  //  Get count of available test groups.
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_count()
  {
    return $this->m_count;
  }
  
  ////////////////////////////////////////////////////////////////////////////
  //
  //  write
  //
  //  Write HTML for a drop down selection listing of available test groups.
  //
  ////////////////////////////////////////////////////////////////////////////
  function write($indent)
  {
    echo $indent . "<select name='g'>\n";

    foreach ($this->m_toc as $test_group) {
      echo $indent . "  <option value='{$test_group['testgroup']}'>";
      echo $test_group['title'];
      echo "</option>\n";
    }
    
    echo $indent . "</select>\n";
  }
}

?>