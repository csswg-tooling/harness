<?php
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © 2008 Hewlett-Packard Development Company, L.P. 
//
//  This work is distributed under the W3C¬ Software License 
//  [1] in the hope that it will be useful, but WITHOUT ANY 
//  WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
//
//  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231 
//
//////////////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////////////// 
//
//  class.test_results.phi
//
//  Provides results reporting functionality as a proxy to that provided to the
//  Mobile Test Harness [1].
//
//  Currently, this file represents a place holder for a work in progress.
//  Additional requested functionality, including various results concolidations
//  and cross tabulations, are in active development.
//
// [1] http://dev.w3.org/cvsweb/2007/mobile-test-harness/
//
//////////////////////////////////////////////////////////////////////////////// 

require_once("./lib_test_harness/class.db_connection.phi");

////////////////////////////////////////////////////////////////////////////////
//
//  class test_results
//
//  test_results is a concrete db_connection taylored for storing the 
//  testing results tables.
//
////////////////////////////////////////////////////////////////////////////////
class test_results extends db_connection
{
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Instance variables.
  //
  ////////////////////////////////////////////////////////////////////////////
  var $m_engines;
  var $m_data;
  var $m_test_suite;

  ////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor
  //
  ////////////////////////////////////////////////////////////////////////////
  function test_results
    ( $test_suite
    , $test_select
    , $select_type
    , $engine
    , $engine_version
    , $platform
    , $grouping
    , $modified
    , $order
    )
  {
    parent::db_connection();
    
    $this->m_test_suite = $test_suite;
/*    
    $sql  = "SELECT testcase as Test, useragent as UserAgent, ";
    $sql .= "SUM(result='pass') as Pass, SUM(result='fail') as Fail, ";
    $sql .= "SUM(result='uncertain') as Uncertain, ";
    $sql .= "COUNT(*) as count ";
    $sql .= "FROM results GROUP BY testcase, useragent ";
*/

    $sql = "SELECT DISTINCT engine FROM useragents WHERE engine!='' ORDER BY engine";
    $r = $this->query($sql);
    if (! $r->is_false()) {
      $db_engines = $r->fetch_table();
      foreach ($db_engines as $db_engine) {
        $this->m_engines[] = $db_engine['engine'];
      }
    }

    $sql  = "SELECT testcase, engine, SUM(pass) as pass, ";
    $sql .= "SUM(fail) as fail, SUM(uncertain) as uncertain, ";
    $sql .= "COUNT(pass + fail + uncertain) as count FROM (";
    
    $sql .= "SELECT testcases.title, testcases.testsuite, ";
    $sql .= "testcases.testgroup, testcases.testcase, results.useragent_id, ";
    $sql .= "results.modified, useragents.engine, testcases.active, result='pass' AS pass, ";
    $sql .= "result='fail' AS fail, result='uncertain' AS uncertain ";
    $sql .= "FROM testcases LEFT JOIN (results, useragents) ";
    $sql .= "ON (testcases.id=results.testcase_id AND results.useragent_id=useragents.id)) as t ";
    $sql .= "WHERE t.testsuite LIKE '{$test_suite}' ";
    $sql .= "AND t.active='1' ";
    
    if($test_select) {
      if($select_type == 1) {
        $sql .= "AND t.testgroup = '{$test_select}' ";
      } elseif($select_type==2) {
        $sql .= "AND t.testcase = '{$test_select}' ";
      }
    }
    
    if($modified) {
      $sql .= "AND t.modified <= '{$modified}' ";
    }  
    
    if($engine) {
      $sql .= "AND engine='{$engine}' ";
      if($engine_version) {
        $sql .= "AND engine_version = '{$engine_version}' ";
      }
      if($platform) {
        $sql .= "AND platform = '{$platform}' ";
      }
    }
    if($grouping == 's') {
      $sql .= "GROUP BY testsuite, testcase, ";
    } elseif($grouping == 'g') {
      $sql .= "GROUP BY testgroup, testcase, ";
    } else {
      $sql .= "GROUP BY testcase, ";
    }
    $sql .= "engine "; 
    if ($engine_version) {
      $sql .= ", engine_version ";
    }

//print $sql;
    $r = $this->query($sql);

    if($r->is_false()) {
      $msg = 'Unable to obtain results.';
      trigger_error($msg, E_USER_ERROR);
    }

    $this->m_data = $r->fetch_table();
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  write
  //
  //  Write HTML for a table displaying the results data.
  //
  ////////////////////////////////////////////////////////////////////////////
  function write($indent)
  {

    if(!($this->m_data)) {
      echo $indent . "<p>No results entered matching this query.</p>\n";
    } else {

      echo $indent . "<table>\n";
      echo $indent . "  <tr>\n";
      echo $indent . "    <th>Testcase</th>\n";
      foreach ($this->m_engines as $engine) {
        echo $indent . "    <th>{$engine}</th>\n";
      }
      echo $indent . "  </tr>\n";
      
      $testcase_count = 0;
      $testcase_pass_count = 0;
      $last_testcase = '';
      foreach ($this->m_data as $result) {
        $testcase = $result['testcase'];
        if ($testcase != $last_testcase) {
          if ($last_testcase) {
            foreach ($this->m_engines as $engine) {
              if (array_key_exists($engine, $engine_count)) {
                $pass = $engine_pass[$engine];
                $fail = $engine_fail[$engine];
                $uncertain = $engine_uncertain[$engine];
                if (0 < $pass) {
                  $pass_count++;
                  $row .= "<td class='pass'>";
                }
                else if (0 < $fail) {
                  $row .= "<td class='fail'>";
                }
                else {
                  $row .= "<td class='uncertain'>";
                }
                $row .= "<a href='details?s={$this->m_test_suite}&c={$last_testcase}&e={$engine}'>";
                $row .= ((0 < $pass) ? $pass : '.') . '&nbsp;/&nbsp;';
                $row .= ((0 < $fail) ? $fail : '.') . '&nbsp;/&nbsp;';
                $row .= ((0 < $uncertain) ? $uncertain : '.');
                $row .= "</a>";
                $row .= "</td>";
              }
              else {
                $row .= "<td>&nbsp;</td>";
              }
            }
            if (1 < $pass_count) {
              echo $indent . "  <tr class='pass'>";
              $testcase_pass_count++;
            }
            else {
              echo $indent . "  <tr>";
            }
            echo "{$row}</tr>\n";
          }
          unset ($engine_pass);
          unset ($engine_fail);
          unset ($engine_uncertain);
          unset ($engine_count);
          $testcase_count++;
          $pass_count = 0;
          $row = "<td><a href='details?s={$this->m_test_suite}&c={$testcase}'>{$testcase}</a></td>";
        }
        $engine_pass[$result['engine']] = $result['pass'];
        $engine_fail[$result['engine']] = $result['fail'];
        $engine_uncertain[$result['engine']] = $result['uncertain'];
        $engine_count[$result['engine']] = $result['count'];
        
        $last_testcase = $testcase;
      }
      
      foreach ($this->m_engines as $engine) {
        if (array_key_exists($engine, $engine_count)) {
          $pass = $engine_pass[$engine];
          $fail = $engine_fail[$engine];
          $uncertain = $engine_uncertain[$engine];
          if (0 < $pass) {
            $pass_count++;
            $row .= "<td class='pass'>";
          }
          else if (0 < $fail) {
            $row .= "<td class='fail'>";
          }
          else {
            $row .= "<td class='uncertain'>";
          }
          $row .= "<a href='details?s={$this->m_test_suite}&c={$testcase}&e={$engine}'>";
          $row .= ((0 < $pass) ? $pass : '.') . '&nbsp;/&nbsp;';
          $row .= ((0 < $fail) ? $fail : '.') . '&nbsp;/&nbsp;';
          $row .= ((0 < $uncertain) ? $uncertain : '.');
          $row .= "</a>";
          $row .= "</td>";
        }
        else {
          $row .= "<td>&nbsp;</td>";
        }
      }
      if (1 < $pass_count) {
        echo $indent . "  <tr class='pass'>";
        $testcase_pass_count++;
      }
      else {
        echo $indent . "  <tr>";
      }
      echo "{$row}</tr>\n";
      
      echo $indent . "</table>\n";
      echo $indent . "<p>{$testcase_pass_count} of {$testcase_count} tests meet exit criteria.</p>\n";

/*
      echo $indent . '<table>' . "\n";
      echo $indent . '  <tr>' ."\n";
      foreach($this->m_data[0] as $key=>$value) {
        echo $indent . '    <th>' ."\n";
        echo $indent . '      ' . $key;
        echo $indent . '    </th>' ."\n";
      }
      echo $indent . '  </tr>' ."\n";

      foreach($this->m_data as $result) {
      
        echo $indent . '  <tr>' ."\n";
        foreach($result as $value) {
          echo $indent . '    <td>' ."\n";
          echo $indent . '      ' . $value;
          echo $indent . '    </td>' ."\n";
        }
        echo $indent . '  </tr>' ."\n";
      }
      echo $indent . '</table>' . "\n";
 */
    }
  }
}

?>