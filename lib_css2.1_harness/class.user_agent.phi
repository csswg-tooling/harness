<?php
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © 2008 Hewlett-Packard Development Company, L.P. 
// 
//  This work is distributed under the W3C¬ Software License 
//  [1] in the hope that it will be useful, but WITHOUT ANY 
//  WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// 
//  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231 
//
//////////////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////////////// 
//
//  class.user_agent.php
//
//  In the Mobile Test Harness [1] user-agents where identified by full
//  user-agent string. For the CSS2.1 test harness there is a desire to
//  allow consolodated results for user-agent strings representing the
//  same browser type, version number and/or platform (OS).
//
//  Herein functionallity is provided whereby a user-agent string can be
//  summarized by a browser type, a version number, and a platform (OS).
//  First, the database is queried using either a user-agent string or
//  a unique id code. If the user-agent is not in the database, then the
//  provided string is parsed to obtain a reasonable guess for the browser,
//  version, and platform information.
//
// [1] http://dev.w3.org/cvsweb/2007/mobile-test-harness/
//
//////////////////////////////////////////////////////////////////////////////// 

require_once("./lib_test_harness/class.db_connection.phi");

////////////////////////////////////////////////////////////////////////////////
//
//  class user_agent
//
//  user_agent is a concrete db_connection taylored for storing the 
//  information about a particular user agent.
//
////////////////////////////////////////////////////////////////////////////////
class user_agent extends db_connection
{
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Instance variables.
  //
  ////////////////////////////////////////////////////////////////////////////
  var $m_info;

  ////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor
  //
  ////////////////////////////////////////////////////////////////////////////
  function user_agent($id='') 
  {
    parent::db_connection();

    $this->m_info = $this->lookup($id);
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  lookup()
  //
  //  Query the database for information about known user agents.
  //  If the user agent is unknown or if an id is not provided,
  //  then provide a guess of the required information using 
  //  the get_browser() function.
  //
  ////////////////////////////////////////////////////////////////////////////
  function lookup($id) 
  {
    if(!isset($id) || $id=='') {
      $id = $_SERVER['HTTP_USER_AGENT'];
      $ua = $this->query_by_string($id);
    } else {
      $ua = $this->query_by_id($id);
      if(!isset($ua) || !isset($ua['id'])) {
        unset($ua);
        $ua = $this->query_by_string($id);
      }
    }
    if(!isset($ua) || !isset($ua['id']) || $ua['id']=='') {
      $ua = $this->parse_ua_string($id);
    }
    return $ua;
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  query_by_id
  //
  ////////////////////////////////////////////////////////////////////////////
  function query_by_id($id) 
  {
    $sql  = "SELECT id,useragent,engine,engine_version,browser,browser_version,platform FROM useragents ";
    $sql .= "WHERE id='$id' ";
    $sql .= "LIMIT 1";
    $r = $this->query($sql);
    if($r->is_false()) {
      return null;
    }
    return $r->fetch_array();
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  query_by_string
  //
  ////////////////////////////////////////////////////////////////////////////
  function query_by_string($ua_string) 
  {
    $sql  = "SELECT id,useragent,engine,engine_version,browser,browser_version,platform FROM useragents ";
    $sql .= "WHERE useragent='$ua_string' ";
    $sql .= "LIMIT 1";
    $r = $this->query($sql);
    if($r->is_false()) {
      return null;
    }
    return $r->fetch_array();
  }


  ////////////////////////////////////////////////////////////////////////////
  //
  //  helper functions to split useragent strings into component parts
  //
  ////////////////////////////////////////////////////////////////////////////
  protected function _split_ua_product_version($product)
  {
    if (('(' == $product[0]) && (')' == substr($product, -1))) {
      return substr($product, 1, strlen($product) - 2);
    }
    $slash = strpos($product, '/');
    if ((FALSE === $slash) || (($slash + 1) == strlen($product))) {
      return $product;
    }
    $version = substr($product, $slash + 1);
    $product = substr($product, 0, $slash);
    return compact("product", "version");
  }
  
  protected function _explode_ua_comment($ua_comment)
  {
    if (FALSE === strpos($ua_comment, ';')) {
      return $ua_comment;
    }
    return preg_split('/;(\s)+/', $ua_comment);
  }

  protected function _explode_ua_string($ua_string)
  {
    $ua_string = str_replace(') (', '; ', $ua_string);  // collapse sequential comments (from Uzbl browser)
    
    $index = -1;
    $count = strlen($ua_string);
    
    $start = 0;
    while (++$index < $count) {
      if (' ' == $ua_string[$index]) {
        $product = $this->_split_ua_product_version(substr($ua_string, $start, $index - $start));
        while ((++$index < $count) && (' ' == $ua_string[$index])) ;
        $start = $index;
        $comment = '';
        if (($index < $count) && ('(' == $ua_string[$index])) { // grab comment
          $start++;
          $level = 0;
          while (++$index < $count) {
            if ('(' == $ua_string[$index]) {
              $level++;
            }
            if (')' == $ua_string[$index]) {
              if (0 == $level) {
                break;
              }
              $level--;
            }
          }
          $comment = substr($ua_string, $start, $index - $start);
          while ((++$index < $count) && (' ' == $ua_string[$index])) ;
          $start = $index;
          $index--;
        }
        if ('' == $comment) {
          $r[] = $product;
        }
        else {
          $comment = $this->_explode_ua_comment($comment);
          $r[] = compact("product", "comment");
        }
      }
    }
    if ($start < $index) {
      $r[] = $this->_split_ua_product_version(substr($ua_string, $start, $index - $start));
    }
    return $r;
  }
  
  ////////////////////////////////////////////////////////////////////////////
  //
  //  parse_ua_string
  //
  ////////////////////////////////////////////////////////////////////////////
  function parse_ua_string($ua_string) 
  {
    $r['id'] = null;
    $r['useragent'] = $ua_string;
    
    $ua_data = $this->_explode_ua_string($ua_string);
    
    $browser = '';
    $browser_version = '';
    $engine = '';
    $engine_version = '';
    $platform = '';
    
    // find browser
    $product = $ua_data[0];
    $version = '';
    $comment = '';
    if (is_array($product)) {
      extract($product);
      if (is_array($product)) {
        extract($product);
      }
    }
    if ('mozilla' == strtolower($product)) {    // we have to go looking... search comments
      if (is_array($comment)) {
        foreach ($comment as $comment_chunk) {
          if (0 === stripos($comment_chunk, 'MSIE')) {
            $browser = 'Internet Explorer';
            $browser_version = substr($comment_chunk, 5);
            $engine = 'Trident';
          }
          if (0 === stripos($comment_chunk, 'Trident')) {
            $product = $this->_split_ua_product_version($comment_chunk);
            if (is_array($product)) {
              extract($product);
              $engine_version = $version;
            }
            $engine = $product;
          }
          if (0 === stripos($comment_chunk, 'Konqueror')) {
            $product = $this->_split_ua_product_version($comment_chunk);
            if (is_array($product)) {
              extract($product);
              $browser_version = $version;
            }
            $browser = $product;
          }
          if (0 === stripos($comment_chunk, 'Googlebot')) {
            $product = $this->_split_ua_product_version($comment_chunk);
            if (is_array($product)) {
              extract($product);
              $browser_version = $version;
            }
            $browser = $product;
          }
        }
      }
    }
    else {
      $browser = $product;
      $browser_version = $version;
    }
    
    // find platform in initial comment
    if (is_array($comment)) {
      foreach($comment as $comment_chunk) {
        if ((0 === stripos($comment_chunk, 'Linux')) || 
            (0 === stripos($comment_chunk, 'Unix')) ||
            (0 === stripos($comment_chunk, 'Android')) ||
            (0 === stripos($comment_chunk, 'Windows')) ||
            (0 === stripos($comment_chunk, 'Macintosh')) ||
            (0 === stripos($comment_chunk, 'Chromium')) ||
            (0 === stripos($comment_chunk, 'OpenBSD')) ||
            (0 === stripos($comment_chunk, 'FreeBSD')) ||
            (0 === stripos($comment_chunk, 'WebOS'))) {
          $platform = $comment_chunk;
        }
        if ((0 === stripos($comment_chunk, 'iPad')) ||
            (0 === stripos($comment_chunk, 'iPhone')) ||
            (0 === stripos($comment_chunk, 'iPod'))) {
          $platform = "iOS";
        }
      }
    }
    else {
      $platform = $comment;
    }
    
    // find engine and possibly browser
    foreach ($ua_data as $ua_chunk) {
      $comment = '';
      $version = '';
      if (is_array($ua_chunk)) {
        extract($ua_chunk);
        if (is_array($product)) {
          extract($product);
        }
      }
      else {
        $product = $ua_chunk;
      }
      if ((0 === stripos($product, 'Amaya')) ||
          (0 === stripos($product, 'AppleWebKit')) ||
          (0 === stripos($product, 'WebKit')) ||
          (0 === stripos($product, 'Gecko')) ||
          (0 === stripos($product, 'KHTML')) ||
          (0 === stripos($product, 'Presto')) ||
          (0 === stripos($product, 'Prince')) ||
          (0 === stripos($product, 'Trident'))) {
        $engine = $product;
        $engine_version = $version;
      }
      if ('' == $browser) {
        if ((0 === stripos($product, 'Firefox')) ||
            (0 === stripos($product, 'Chrome'))) {
          $browser = $product;
          $browser_version = $version;
        }
        if (0 === stripos($product, 'Version')) {
          $browser = 'Safari';
          $browser_version = $version;
        }
      }
    }
    
    // no browser yet, take last product
    if ('' == $browser) {
      $browser = $product;
      $browser_version = $version;
    }
    
    // general cleanups
    if ('' == $engine) {
      if (0 === stripos($browser, 'Firefox')) {
        $engine = 'Gecko';
      }
      if (0 === stripos($browser, 'Uzbl')) {
        $engine = 'WebKit';
      }
    }
    if ((0 === stripos($engine, 'AppleWebKit')) ||
        (0 === stripos($engine, 'KHTML')) ||        // Not enough difference between KHTML and WebKit, aggregate results
        (0 === stripos($engine, 'WebKitGTK'))) {
      $engine = 'WebKit';
    }
    
    $r['engine'] = $engine;
    $r['engine_version'] = $engine_version;
    $r['browser'] = $browser;
    $r['browser_version'] = $browser_version;
    $r['platform'] = $platform;
    return $r;
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  update()
  //
  //  Reload info about the user agent from the database.
  //
  ////////////////////////////////////////////////////////////////////////////
  function update()
  {
    $ua = $this->lookup($this->get_ua_string());

    if($ua['id'] == null) {
      $sql  = "INSERT INTO useragents ";
      $sql .= "(useragent, engine, engine_version, browser, browser_version, platform) ";
      $sql .= "VALUES (";
      $sql .= "'".$ua['useragent']."',";
      $sql .= "'".$ua['engine']."',";
      $sql .= "'".$ua['engine_version']."',";
      $sql .= "'".$ua['browser']."',";
      $sql .= "'".$ua['browser_version']."',";
      $sql .= "'".$ua['platform']."'";
      $sql .= ")";
      $r = $this->query($sql);
      $ua = $this->lookup($ua['useragent']);
    }

    $this->m_info = $ua;
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  write
  //
  //  Write HTML for a human readable description of the user agent.
  //
  ////////////////////////////////////////////////////////////////////////////
  function write($indent = '')
  {
    if($this->get_browser() == 'Default Browser') {
      echo $indent . 'unknown';
    } else {
      echo $indent . $this->get_browser();
      
      if($this->get_browser_version() != '') {
        echo ' ' . $this->get_browser_version();
      }
      
      if ($this->get_engine() != '') {
        echo ' (' . $this->get_engine();
        if ($this->get_engine_version() != '') {
          echo ' ' . $this->get_engine_version();
        }
        echo ')';
      }

      if($this->get_platform() != '') {
        echo ' on ' . $this->get_platform();
      }
    }
  }

  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Member functions for retrieving information about the user agent
  //
  //    get_id()
  //    get_ua_string()
  //    get_engine()
  //    get_engine_version()
  //    get_browser()
  //    get_browser_version()
  //    get_platform()
  //
  ////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_id()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_id()
  {
    return $this->m_info['id'];
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_ua_string()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_ua_string()
  {
    return $this->m_info['useragent'];
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_engine()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_engine()
  {
    return $this->m_info['engine'];
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_engine_version()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_engine_version()
  {
    return $this->m_info['engine_version'];
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_browser()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_browser()
  {
    return $this->m_info['browser'];
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_browser_version()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_browser_version()
  {
    return $this->m_info['browser_version'];
  }

  ////////////////////////////////////////////////////////////////////////////
  //
  //  get_platform()
  //
  ////////////////////////////////////////////////////////////////////////////
  function get_platform()
  {
    return $this->m_info['platform'];
  }

}

?>
